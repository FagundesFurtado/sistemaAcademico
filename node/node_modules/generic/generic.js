

var generic = module.exports = function(defaultImpl) {

  var methods = [];

  var inst = function() {
    var args = toArray(arguments);
    var impl = defaultImpl;

    for (var i in methods) {
      var method = methods[i];
      if (method.match(args)) {
        impl = method.impl;
        break;
      }
    }

    return impl.apply(null, args);
  };

  inst.method = function(pattern, impl) {
    methods.push({match: mkmatcher(pattern), impl: impl});
  };

  return inst;
};

function mkmatcher(pattern) {
  if (typeof(pattern) == 'function')
    return pattern;

  if (pattern instanceof Array) {
    var matchers = pattern.map(mkmatcher);
    return function(args) {
      for (var i in matchers) {
        if (!matchers[i](args[i]))
          return false;
      }
      return true;
    };
  }

  throw 'poop';
}

function toArray(x) {
  return Array.prototype.slice.apply(x);
}
